// popup.js
// This popup only displays the latest recommendation generated by content.js
// and provides the settings modal for the OpenAI API key.
document.addEventListener('DOMContentLoaded', () => {
  setupSettingsModal();
  loadSavedKey();
  // Modular: Inject content.js and call modular functions in tab context
  (async function() {
    const recDiv = document.getElementById('site-recommendation');
    recDiv.innerHTML = '<span style="color:gray;">Generating recommendation...';
    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
      const tabId = tabs[0].id;
      // Inject content.js (if not already present)
      chrome.scripting.executeScript({
        target: {tabId},
        files: ['content.js']
      }, () => {
        // Step 1: Extract cart items
        chrome.scripting.executeScript({
          target: {tabId},
          func: () => window.extractCartItems()
        }, (cartResults) => {
          const cartItems = cartResults && cartResults[0] && Array.isArray(cartResults[0].result) ? cartResults[0].result : [];
          // Step 2: Get site info
          chrome.tabs.get(tabId, (tab) => {
            const site = new URL(tab.url).hostname;
            // Step 3: Load cards.json in popup and pass to buildLLMPrompt in tab
            fetch(chrome.runtime.getURL('cards.json'))
              .then(resp => resp.json())
              .then(cards => {
                chrome.scripting.executeScript({
                  target: {tabId},
                  func: (cartItems, site, cards) => window.buildLLMPrompt(cartItems, site, cards),
                  args: [cartItems, site, cards]
                }, (promptResults) => {
                const prompt = promptResults && promptResults[0] && typeof promptResults[0].result === 'string' ? promptResults[0].result : '';
                // Step 5: Get OpenAI API key from extension storage
                chrome.storage.local.get(['openaiKey'], async (result) => {
                  const apiKey = result.openaiKey;
                  if (!apiKey) {
                    recDiv.innerHTML = '<span style="color:red;">OpenAI API key not set.</span>';
                    return;
                  }
                  // Step 6: Call OpenAI API in tab
                  chrome.scripting.executeScript({
                    target: {tabId},
                    func: (prompt, apiKey) => window.callOpenAIChat(prompt, apiKey),
                    args: [prompt, apiKey]
                  }, (llmResults) => {
                    const llmResponse = llmResults && llmResults[0] && typeof llmResults[0].result === 'string' ? llmResults[0].result : '';
                    if (llmResponse) {
                      let cardName = '', rewards = {}, merchant = '', category = '';
                      let parsed = null;
                      try {
                        // Remove markdown code block if present
                        let jsonStr = llmResponse.trim();
                        if (jsonStr.startsWith('```json')) {
                          jsonStr = jsonStr.replace(/^```json/, '').replace(/```$/, '').trim();
                        } else if (jsonStr.startsWith('```')) {
                          jsonStr = jsonStr.replace(/^```/, '').replace(/```$/, '').trim();
                        }
                        parsed = JSON.parse(jsonStr);
                        cardName = parsed.card || '';
                        rewards = parsed.rewards || {};
                        merchant = parsed.merchant || '';
                        category = parsed.category || '';
                      } catch (e) {}
                      if (cardName && rewards && merchant && category) {
                        recDiv.innerHTML = `
                          <div style="font-weight:600; margin-bottom:3px;">Best Card Recommendation: <span style='font-weight:700;'>${cardName}</span></div>
                          <ul style="margin:0 0 0 16px; padding:0;">
                            <li><b>Rewards:</b><br>
                              <span style='font-family:monospace;'>${Object.entries(rewards).map(([k,v]) => `${k}: ${v}`).join('<br>')}</span>
                            </li>
                            <li><b>Merchant:</b> ${merchant}</li>
                            <li><b>Category:</b> ${category}</li>
                          </ul>
                        `;
                      } else {
                        recDiv.innerHTML = `<span>${llmResponse}</span>`;
                      }
                    } else {
                      recDiv.innerHTML = `<span style='color:red;'>LLM error or no response.</span>`;
                    }
                  });
                });
              });
            });
          });
        });
      });
    });
  })();

  // Fetch and display the latest recommendation from chrome.storage
  function displayLatestRecommendation() {
    const recDiv = document.getElementById('site-recommendation');
    chrome.storage.local.get(['latestRecommendation'], result => {
      if (result.latestRecommendation) {
        recDiv.innerHTML = result.latestRecommendation;
      } else {
        recDiv.innerHTML = '<span style="color:gray;">No recommendation available yet.</span>';
      }
    });
  }

  // Settings modal logic (unchanged)
  function setupSettingsModal() {
    const modal = document.getElementById('settings-modal');
    const openBtn = document.getElementById('settings-btn');
    const closeBtn = document.getElementById('close-modal-btn');
    const saveBtn = document.getElementById('save-key-btn');
    const keyInput = document.getElementById('openai-key');
    const statusDiv = document.getElementById('save-key-status');
    openBtn.onclick = () => {
      modal.style.display = 'flex';
      loadSavedKey();
      statusDiv.textContent = '';
    };
    closeBtn.onclick = () => {
      modal.style.display = 'none';
      statusDiv.textContent = '';
    };
    saveBtn.onclick = async () => {
      const key = keyInput.value.trim();
      if (!key.startsWith('sk-')) {
        statusDiv.style.color = 'red';
        statusDiv.textContent = 'Invalid API key.';
        return;
      }
      await saveKey(key);
      statusDiv.style.color = 'green';
      statusDiv.textContent = 'API key saved!';
      setTimeout(() => { modal.style.display = 'none'; }, 1000);
    };
    // Hide modal on outside click
    modal.onclick = (e) => { if (e.target === modal) modal.style.display = 'none'; };
  }

  async function saveKey(key) {
    return new Promise(resolve => {
      chrome.storage.local.set({ openaiKey: key }, resolve);
    });
  }
  async function getSavedKey() {
    return new Promise(resolve => {
      chrome.storage.local.get(['openaiKey'], result => {
        resolve(result.openaiKey || '');
      });
    });
  }
  function loadSavedKey() {
    const keyInput = document.getElementById('openai-key');
    if (!keyInput) return;
    getSavedKey().then(key => { keyInput.value = key || ''; });
  }
});
